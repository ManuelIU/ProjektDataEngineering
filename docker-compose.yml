services:
  minio:
    image: minio/minio:RELEASE.2025-09-07T16-13-09Z
    container_name: minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
  
  spark-master:
    build:
      context: ./dockerfiles
      dockerfile: Dockerfile.spark
    image: spark-master
    container_name: spark-master
    command: >
      /opt/spark/bin/spark-class org.apache.spark.deploy.master.Master
      --host spark-master
      --port 7077
      --webui-port 8081
    ports:
      - "7077:7077"
      - "8081:8081"
    environment:
      TZ: ${TIMEZONE}
      SPARK_LOCAL_TIMEZONE: ${TIMEZONE}
      SPARK_SQL_SESSION_TIMEZONE: ${TIMEZONE}
    depends_on:
      minio:
        condition: service_healthy
    volumes:
      - ./spark_tasks:/opt/airflow/spark_tasks:ro
      - ./data:/opt/airflow/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081"]
      interval: 20s
      timeout: 5s
      retries: 10
    restart: unless-stopped

  spark-worker:
    build:
      context: ./dockerfiles
      dockerfile: Dockerfile.spark
    image: spark-worker
    container_name: spark-worker
    command: >
      /opt/spark/bin/spark-class org.apache.spark.deploy.worker.Worker
      spark://spark-master:7077
      --webui-port 8082
    ports:
      - "8082:8082"
    environment:
      TZ: ${TIMEZONE}
      SPARK_LOCAL_TIMEZONE: ${TIMEZONE}
      SPARK_SQL_SESSION_TIMEZONE: ${TIMEZONE}
    depends_on:
      spark-master:
        condition: service_healthy
    volumes:
      - ./spark_tasks:/opt/airflow/spark_tasks
      - ./data:/opt/airflow/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082"]
      interval: 20s
      timeout: 5s
      retries: 10
    restart: unless-stopped

  postgres:
    image: postgres:14
    container_name: postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      retries: 5
    restart: unless-stopped
  
  airflow-init:
    build:
      context: ./dockerfiles
      dockerfile: Dockerfile.airflow
    image: pde-airflow:local
    container_name: airflow-init
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      AIRFLOW__CORE__LOAD_EXAMPLES: "False"
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__CORE__FERNET_KEY: ${AIRFLOW_FERNET_KEY}
      AIRFLOW__WEBSERVER__SECRET_KEY: ${AIRFLOW__WEBSERVER__SECRET_KEY}
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_AIRFLOW_DB}
      AIRFLOW__CORE__DEFAULT_TIMEZONE: ${TIMEZONE}
      TZ: ${TIMEZONE}
    volumes:
      - ./dags:/opt/airflow/dags:ro
      - ./spark_tasks:/opt/airflow/spark_tasks:ro
      - ./data:/opt/airflow/data
    command: >
      bash -c "airflow db upgrade &&
        airflow users create --username ${AIRFLOW_USER} --password ${AIRFLOW_PASSWORD} --firstname Admin --lastname User --role Admin --email ${AIRFLOW_USER_EMAIL} || true"
    restart: "no"

  airflow-scheduler:
    image: pde-airflow:local
    container_name: airflow-scheduler
    depends_on:
      postgres:
        condition: service_healthy
      airflow-init:
        condition: service_completed_successfully
      spark-master:
        condition: service_healthy
    environment:
      AIRFLOW__CORE__LOAD_EXAMPLES: "False"
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__CORE__FERNET_KEY: ${AIRFLOW_FERNET_KEY}
      AIRFLOW__WEBSERVER__SECRET_KEY: ${AIRFLOW__WEBSERVER__SECRET_KEY}
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_AIRFLOW_DB}
      AIRFLOW_CONN_SPARK_DEFAULT: spark://spark-master:7077
      AIRFLOW__CORE__DEFAULT_TIMEZONE: ${TIMEZONE}
      TZ: ${TIMEZONE}
      PYTHONDONTWRITEBYTECODE: "1"
    volumes:
      - ./dags:/opt/airflow/dags:ro
      - ./spark_tasks:/opt/airflow/spark_tasks:ro
      - ./data:/opt/airflow/data
    command: ["airflow", "scheduler"]
    healthcheck:
      test: ["CMD-SHELL", "airflow jobs check --job-type SchedulerJob --hostname $(hostname) || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 10
    restart: unless-stopped
  
  airflow-webserver:
    image: pde-airflow:local
    container_name: airflow-webserver
    depends_on:
      postgres:
        condition: service_healthy
      airflow-init:
        condition: service_completed_successfully
      airflow-scheduler:
        condition: service_healthy
    environment:
      AIRFLOW__CORE__LOAD_EXAMPLES: "False"
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__CORE__FERNET_KEY: ${AIRFLOW_FERNET_KEY}
      AIRFLOW__WEBSERVER__SECRET_KEY: ${AIRFLOW__WEBSERVER__SECRET_KEY}
      AIRFLOW__WEBSERVER__EXPOSE_CONFIG: "False"
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_AIRFLOW_DB}
      AIRFLOW_CONN_SPARK_DEFAULT: spark://spark-master:7077
      AIRFLOW__CORE__DEFAULT_TIMEZONE: ${TIMEZONE}
      TZ: ${TIMEZONE}
    volumes:
      - ./dags:/opt/airflow/dags:ro
      - ./spark_tasks:/opt/airflow/spark_tasks:ro
      - ./data:/opt/airflow/data
    ports:
      - "8080:8080"
    command: ["airflow", "webserver"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 10
    restart: unless-stopped

volumes:
  minio_data:
    driver: local
  pgdata:
    driver: local